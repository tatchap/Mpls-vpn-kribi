hostname PE1  # Set the router hostname for identification
!
ip vrf emergence                # Define a VRF named "emergence"
 rd 1:1                         # Route Distinguisher: makes VPNv4 prefixes unique :contentReference[oaicite:1]{index=1}
 route-target import 1:1        # Accept routes tagged with RT 1:1 (self-import)
 route-target import 1:2        # Also import from VRF with RT 1:2 (enable inter-VRF communication)
 route-target import 1:3
 route-target import 1:4
 route-target export 1:1        # Tag exported routes with RT 1:1
 route-target export 1:2        # Tag exported routes with RT 1:2
 route-target export 1:3
 route-target export 1:4       # Multiple RT import/export supports full mesh communication :contentReference[oaicite:2]{index=2}
!
interface f0/0
 ip address 172.60.30.17 255.255.255.240  # Connects to backbone router P1
 mpls ip                                # Enable MPLS label switching on this interface :contentReference[oaicite:3]{index=3}
 no shutdown
!
interface f0/1
 ip vrf forwarding emergence            # Bind this interface to VRF "emergence"
 ip address 172.60.30.2 255.255.255.240 # Connects to CE1 (Emergence)
 no shutdown
!
interface Loopback0
 ip address 20.0.0.10 255.255.255.255   # Stable loopback IP used as Router-ID and for iBGP/MPLS control-plane
!
router ospf 1
 network 172.60.30.0 0.0.0.255 area 0   # Advertise backbone links for LDP label distribution
 network 20.0.0.10 0.0.0.0 area 0      # Include loopback in OSPF for stable routing adjacency
!
router eigrp 1
 address-family ipv4 vrf emergence     # Enter EIGRP within VRF context
  autonomous-system 1                  # Define EIGRP AS number
  network 172.60.30.0 0.0.0.15         # Advertise the CE1-facing subnet into VRF
!
router bgp 1
 bgp log-neighbor-changes              # Log BGP session events
 neighbor 20.0.0.20 remote-as 1        # Peer with PE2
 neighbor 20.0.0.30 remote-as 1        # Peer with PE3
 neighbor 20.0.0.40 remote-as 1        # Peer with PE4
 neighbor 20.0.0.20 update-source Loopback0  # Use loopback for stable BGP neighbor source
 neighbor 20.0.0.30 update-source Loopback0
 neighbor 20.0.0.40 update-source Loopback0
!
 address-family vpnv4
  neighbor 20.0.0.20 activate          # Enable VPNv4 session with PE2
  neighbor 20.0.0.30 activate          # Enable VPNv4 session with PE3
  neighbor 20.0.0.40 activate          # Enable VPNv4 session with PE4
  neighbor 20.0.0.20 send-community both  # Send RTs so other PEs know how to import routes
  neighbor 20.0.0.30 send-community both
  neighbor 20.0.0.40 send-community both
 exit-address-family
!
 address-family ipv4 vrf emergence
  redistribute eigrp 1 metric 1        # Import EIGRP routes into VRF’s BGP table to advertise via MPLS VPN
!
router eigrp 1
 address-family ipv4 vrf emergence
  redistribute bgp 1 metric 1024 1 255 1 1500
  
   # Redistribute VPN-learned BGP routes back into VRF’s EIGRP, so CE learns other sites’ prefixes
   # Metrics follow EIGRP requirements: bandwidth, delay, reliability, load, MTU :contentReference[oaicite:4]{index=4}
